<?php

declare(strict_types=1);

namespace Models;

use PDO;
use PDOException;

/**
 * Class User represents real user in the site
 */
class User
{
    /**
     * @var int $id Id of current user, must be 0 when user is new or undefined
     * (value will be ignored when save and updated after)
     */
    private int $id;

    /**
     * @var string $name Name of the user
     */
    private string $name;

    /**
     * @var string $email Email of the user
     */
    private string $email;

    /**
     * @var string $passwordHash The hash generated by password_hash function
     */
    private string $passwordHash;

    protected function __construct(string $name, string $email, string $passwordHash, int $id = 0)
    {
        $this->id = $id;
        $this->name = $name;
        $this->email = $email;
        $this->passwordHash = $passwordHash;
    }

    /**
     * @param string $name Name of the user which was put in signup form
     * @param string $email Email of the user
     * @param string $passwordHash Hash which was created by password_hash
     *      function
     * @return User The new user which was successful saved in db
     * @throws PDOException
     */
    public static function create(string $name, string $email, string $passwordHash): User
    {
        $user = new User($name, $email, $passwordHash);
        $user->save();
        return $user;
    }

    /**
     * Deletes the user from the site could be used further by admin panels.
     * Tables have triggers so auth and other will be removed automatically
     *
     * @throws PDOException
     */
    public function delete()
    {
        $prepared = Connection::get()->prepare(
            "DELETE FROM public.\"user\"
	             WHERE email=:email;"
        );
        $valid = $prepared->bindParam(':email', $this->email, PDO::PARAM_STR, 320);
        if (!$valid || !$prepared->execute()) {
            throw new PDOException();
        }
    }

    /**
     * @param int $id Id of requested user
     * @return User
     * @throws PDOException
     */
    public static function getById(int $id): User
    {
        $prepared = Connection::get()->prepare(
            "SELECT id, name, email, password
	             FROM public.\"user\"
                 WHERE id=:id;"
        );
        $valid = $prepared->bindParam(':id', $id, PDO::PARAM_INT);
        if (!$valid || !$prepared->execute()) {
            throw new PDOException();
        }
        $user = $prepared->fetch(PDO::FETCH_ASSOC);
        if (empty($user)) {
            throw new PDOException();
        }
        return new User($user['name'], $user['email'], $user['password'], (int)$user['id']);
    }

    /**
     * Tries to return existing user by his login and pure password
     *
     * @param string $email Email of requested user
     * @param string $password Pure user password form login form which will be
     *      used in password_verify function
     * @return User User password is correct for user with indicated email
     * @throws PDOException
     */
    public static function getByLogin(string $email, string $password): User
    {
        $prepared = Connection::get()->prepare(
            "SELECT id, name, email, password
	             FROM public.\"user\"
                 WHERE email=:email;"
        );
        $valid = $prepared->bindParam(':email', $email, PDO::PARAM_STR, 320);
        if (!$valid || !$prepared->execute()) {
            throw new PDOException();
        }
        $user = $prepared->fetch(PDO::FETCH_ASSOC);
        if (empty($user) || !password_verify($password, $user['password'])) {
            throw new PDOException();
        }
        return new User($user['name'], $user['email'], $user['password'], (int)$user['id']);
    }

    /**
     * Tries to return existing user by UUID through him session
     *
     * @param string $uuid UUID access token of user session
     * @return User USER whose uuid was used
     * @throws PDOException
     */
    public static function getByUUID(string $uuid): User
    {
        $session = Session::getByUUID($uuid);
        if ($session->isExpired()) {
            $session->destroy();
            throw new PDOException();
        }
        return self::getById($session->getUserId());
    }

    public function getEmail(): string
    {
        return $this->email;
    }

    public function getId(): int
    {
        return $this->id;
    }

    public function getName(): string
    {
        return $this->name;
    }

    /**
     * Save function must be used only for new users
     *
     * @throws PDOException
     */
    protected function save()
    {
        $conn = Connection::get();
        $prepared = $conn->prepare(
            "INSERT INTO public.\"user\" (name, email, password)
	             VALUES (:name, :email, :password)
	             RETURNING id;"
        );
        $valid = $prepared->bindParam(':name', $this->name, PDO::PARAM_STR, 64);
        $valid &= $prepared->bindParam(':email', $this->email, PDO::PARAM_STR, 320);
        $valid &= $prepared->bindParam(':password', $this->passwordHash, PDO::PARAM_STR, 256);
        if (!$valid || !$prepared->execute()) {
            throw new PDOException();
        }
        $row = $prepared->fetch(PDO::FETCH_ASSOC);
        if (empty($row)) {
            throw new PDOException();
        }
        $this->id = (int)$row['id'];
    }
}